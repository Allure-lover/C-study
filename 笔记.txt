第一次做2018年真题，发现自己的不足
    1.数组指针方面认识不透彻（10-23复习）
        一数组的组名是第一个元素的地址
        遍历数组的两种方式: ①定义指针指向数组第一个元素，然后可以用指针变量名代替数组名，遍历过程中，指针位置不变
                        ②指针指向第一个元素，然后移动指针依次指向各个元素，使用指针取值运算得到对应的元素值，但是此时的指针不能再表示原数组
        int a[8], *p;   p=&a[3];    此时p代表的是从a[3] 到 a[7]的数组  p[0] 对应 a[3] 且 p[4] 对应 a[7];
        定义行指针时，必须用 () 将变量名包起来  float (*p)[5];    而不是 float *p[5]; 这是一个指针数组并不是行指针
        对行地址取值运算可以得到元素地址，在对元素地址进行取值运算即可得到二维数组的元素
        行指针       p+i 或 &p[i]                          下标为i行的行地址
        元素指针     *(p+i)+j 或 p[i]+j                    下标为i行j列的元素地址
        元素         *( *(p+i)+j) 或 *(p[i]+j) 或 p[i][j]   下标为i行j列的元素
        真题：int a[12]={8}, *p[3], **pp=p;   for(i=0; i<3;i++) p[i]=&a[i*4];
        定义一个数组a，大小是12，初始化其第一个元素为8；然后定义一个指针数组，每一个元素都是一个整型指针；再定义一个二级指针pp指向p，
        使用二级指针表示的是指向指针的指针就是指向指针数组的指针，相当于上面的可以用指针变量表示该数组
        p[2][3] 等价于 pp[2][3]
    2.运算符的优先级，尤其","运算符（10-23复习）
        "()"  |  "."  "->"  |  "++"  "--"  |  "static_cast"  "dynamic_cast"  "reinterpret_cast"  "const_cast" |
        "*"  "/" "%" | "+" "-" | "<" ">" "<=" ">=" |
        "==" "!=" | "&&" | "||" | "?:" | "=" "+=" "-=" | "," |
        逗号 "," 运算符：顺序求值的运算符  格式：表达式1，表达式2，表达式3，。。。 将最后一个表达式的作为整个逗号表达式的值
    3.排序法有遗忘（10-23复习）
        void swap(int &a, int &b){
            int temp = a;
            a = b;
            b = temp;
        }
        选择排序：
        void bubbleSort(int arr[], int n){
            for(int i=0; i<n-1; i++){
                for(int j=0; j<n-1-i; j++){
                    if(arr[j] > arr[j+1]){
                       swap(arr[j], arr[j+1]); 
                    }
                }
            }
        }
        选择排序：
        void selectionSort(int arr[], int n){
            int i,j,minIdx;
            for(i=0; i< n-1; i++){
                minIdx = i;
                for(j=i+1; j<n; j++){
                    if(arr[minIdx] > arr[j]) minIdx = j;
                }
                swap(arr[minIdx], arr[i]);
            }
        }
        插入排序：
        void insertionSort(int arr[], int n){
            int i, key, j;
            for(i=1; i<n; i++){
                key = arr[i];
                j = i-1;
                while( j>=0 && arr[j] > key){
                    arr[j+1] = arr[j];
                    j--;
                }
                arr[j+1] = key;
            }
        }
        快速排序：  分治思想
        void quickSort(int arr[], int low, int high){
            if(low < high){
                int pi = partition(arr, low, high);
                quickSort(arr, low, pi-1);
                quickSort(arr, pi+1, high);
            }
        }
        int partition(int arr[], int low, int high){
            int pivot = arr[high];
            int i = low -1;
            for(int j=low; j<= high-1; j++){
                if(arr[j] < pivot){
                    i++;
                    swap(arr[i], arr[j]);
                }
            }
            swap(arr[i+1], arr[high]);
            return i+1;
        }
        归并排序：
        void merge(int arr[], int left, int mid, int right) {
            int i, j, k;
            int n1 = mid - left + 1;
            int n2 = right - mid;

            int L[n1], R[n2];
            for (i = 0; i < n1; i++)
                L[i] = arr[left + i];
            for (j = 0; j < n2; j++)
                R[j] = arr[mid + 1 + j];

            i = 0;
            j = 0;
            k = left;
            while (i < n1 && j < n2) {
                if (L[i] <= R[j]) {
                    arr[k] = L[i];
                    i++;
                } else {
                    arr[k] = R[j];
                    j++;
                }
                k++;
            }

            while (i < n1) {
                arr[k] = L[i];
                i++;
                k++;
            }

            while (j < n2) {
                arr[k] = R[j];
                j++;
                k++;
            }
        }

        void mergeSort(int arr[], int left, int right) {
            if (left < right) {
                int mid = left + (right - left) / 2;

                mergeSort(arr, left, mid);
                mergeSort(arr, mid + 1, right);

                merge(arr, left, mid, right);
            }
        }

    4.指针+数操作的意思（10-23复习）
        表示该指针移动数个位置
    5.const类型的对象和非const类型对象的区别，const类型对象调用的成员函数，是const的吗？？（10-23复习）
        如果一个成员函数被声明为 const，那么它表明该函数不会修改任何类的成员变量。这意味着在这个函数内部，成员变量的值是不可变的。
        被声明为const的对象只能访问类中被const修饰的函数，因为调用非const的函数会造成不可预料的结果，但是非const的对象可以调用const修饰的函数
        区别：
        ①赋值和修改：
            针对一个非 const 对象，可以对其进行赋值和修改。
            针对一个 const 对象，一旦创建后，其值就不能再被修改。
        ②成员函数调用：
            const 对象只能调用被声明为 const 的成员函数。
            非 const 对象可以调用所有的成员函数。
        ③构造函数：
            在构造函数中初始化成员变量时，必须注意对于 const 对象来说，其成员变量也必须在构造函数中初始化。
        ④传递到函数中：
            当将对象作为参数传递给函数时，如果函数的参数是 const 引用，那么可以接受 const 对象或非 const 对象。
            如果函数的参数是非 const 引用，只能接受非 const 对象。
        总的来说，const 对象是一种保护对象状态的机制，它确保对象在创建后不会被修改。这种特性在程序设计中非常有用，可以帮助我们避免意外的状态变化。